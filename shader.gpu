

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
uniform float t;
uniform bool lighting;
varying vec4 forFragColor;

void main() {
    vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex,1.0);
    vec3 vertPos = vec3(vertPos4) / vertPos4.w;
    vec3 normalInterp = vec3(NormalMatrix * vec4(normal, 0.0));
    vec3 lightPos = 0.47*vec3(sin(t),cos(t),1.0);

    vec3 N = normalize(normalInterp);
    vec3 L = normalize(lightPos - vertPos);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);
        vec3 V = normalize(-vertPos);
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 80.0);
    }
    vec3 ambientColor = vec3(0.01, 0.3, 0.1);
    vec3 diffuseColor = vec3(0.2, 0.9, 0.1);
    vec3 specularColor = vec3(0.2);
    forFragColor = vec4(ambientColor +lambertian * diffuseColor +specular * specularColor, 1.0);

    if(lighting){
        vertPos4.x+=lightPos.x;
        vertPos4.y+=lightPos.y;
        vertPos4.z+=lightPos.z;
        forFragColor = vec4(1);
    }
    gl_Position = vertPos4;
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec4 forFragColor;
void main() {
    gl_FragColor = forFragColor;
}`;







// // Vertex shader
// const vertexShaderSource = `
// attribute vec3 vertex, normal;
// uniform mat4 ModelViewProjectionMatrix, NormalMatrix;
// varying vec4 forFragColor;

// void main() {
//     vec4 vertPos4 = ModelViewProjectionMatrix * vec4(vertex,1.0);
//     gl_Position = vertPos4;


//     vec3 vertPos = vec3(vertPos4) / vertPos4.w;
//     vec3 normalInterp = vec3(NormalMatrix * vec4(normal, 0.0));
//     vec3 lightPos = vec3(1.0);
//     vec3 N = normalize(normalInterp);
//     vec3 L = normalize(lightPos - vertPos);
//     float lambertian = max(dot(N, L), 0.0);
//     float specular = 0.0;   
//     if(lambertian > 0.0) {
//         vec3 R = reflect(-L, N);
//         vec3 V = normalize(-vertPos);
//         float specAngle = max(dot(R, V), 0.0);
//         specular = pow(specAngle, 80.0);
//     }
//     vec3 ambientColor = vec3(0.01, 0.3, 0.1);
//     vec3 diffuseColor = vec3(0.2, 0.9, 0.1);
//     vec3 specularColor = vec3(0.1);
//     forFragColor = vec4(ambientColor + lambertian * diffuseColor + specular * specularColor, 1.0);
// }`;


// // Fragment shader
// const fragmentShaderSource = `
// #ifdef GL_FRAGMENT_PRECISION_HIGH
//    precision highp float;
// #else
//    precision mediump float;
// #endif

// uniform vec4 color;
// varying vec4 forFragColor;
// void main() {
//     gl_FragColor = forFragColor;
// }`;